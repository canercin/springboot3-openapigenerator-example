/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapigenerator.api;

import com.example.openapigenerator.model.Book;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-07T23:51:28.296560938+03:00[Europe/Istanbul]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "books", description = "the books API")
public interface BooksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /books : Create a new book
     *
     * @param book  (required)
     * @return Book created (status code 201)
     */
    @Operation(
        operationId = "createBook",
        summary = "Create a new book",
        responses = {
            @ApiResponse(responseCode = "201", description = "Book created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Book> _createBook(
        @Parameter(name = "Book", description = "", required = true) @Valid @RequestBody Book book
    ) {
        return createBook(book);
    }

    // Override this method
    default  ResponseEntity<Book> createBook(Book book) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /books/{id} : Delete a book by ID
     *
     * @param id  (required)
     * @return Book deleted (status code 204)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "deleteBook",
        summary = "Delete a book by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "Book deleted"),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/books/{id}"
    )
    
    default ResponseEntity<Void> _deleteBook(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return deleteBook(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteBook(Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books/{id} : Get a book by ID
     *
     * @param id  (required)
     * @return A single book (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "getBookById",
        summary = "Get a book by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "A single book", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))
            }),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Book> _getBookById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getBookById(id);
    }

    // Override this method
    default  ResponseEntity<Book> getBookById(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /books : Get all books
     *
     * @return A list of books (status code 200)
     */
    @Operation(
        operationId = "getBooks",
        summary = "Get all books",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of books", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Book.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Book>> _getBooks(
        
    ) {
        return getBooks();
    }

    // Override this method
    default  ResponseEntity<List<Book>> getBooks() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : 0 }, { \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /books/{id} : Update a book by ID
     *
     * @param id  (required)
     * @param book  (required)
     * @return Book updated (status code 200)
     *         or Book not found (status code 404)
     */
    @Operation(
        operationId = "updateBook",
        summary = "Update a book by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Book updated"),
            @ApiResponse(responseCode = "404", description = "Book not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/books/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> _updateBook(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Book", description = "", required = true) @Valid @RequestBody Book book
    ) {
        return updateBook(id, book);
    }

    // Override this method
    default  ResponseEntity<Void> updateBook(Integer id, Book book) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
